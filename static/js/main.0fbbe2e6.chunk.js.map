{"version":3,"sources":["components/Tweet.tsx","components/TweetList.tsx","components/Contract/CreateContract.ts","components/Context/UserContext.tsx","components/Form/useForm.tsx","components/Form/BasicForm.tsx","components/CreateTweet.tsx","components/CreateAccount.tsx","components/AccountManager.tsx","components/ErrorFallback.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Tweet","tweet","text","user","username","w","borderWidth","borderRadius","pt","pb","px","color","fontWeight","letterSpacing","fontSize","textTransform","ml","textAlign","mb","mt","as","lineHeight","TweetList","tweets","length","spacing","height","align","map","reverse","CreateContract","provider","ethers","Contract","UnstoppableTweetsContract","abi","CreateContractWithSigner","anywindow","window","ethereum","console","error","providers","Web3Provider","signer","getSigner","connect","UserDetailsInitialValue","hasAccount","accountName","UserContext","React","createContext","UserContextProvider","children","useState","userValuesContext","setUserValuesContext","contextObj","value","setUserValue","Provider","UseUserContext","useContext","useForm","validation","_","mapValues","formState","changeState","validateFormFields","useCallback","currentformState","newFormState","Object","entries","reduce","result","id","validationFunc","newValidationState","e","inputElement","target","BasicForm","definition","submitText","onSubmit","validationObj","input","onChange","inputs","isInvalid","label","type","size","helperText","buttonDisabled","values","current","field","preventDefault","style","width","disabled","CreateTweet","createTweet","createdTweet","setCreatedTweet","state","tweetText","CreateAccount","createAccount","useDisclosure","isOpen","onOpen","onClose","isCreatingAccount","setIsCreatingAccount","onClick","a","tweetContract","getAddress","address","hasUserName","userNames","createNewUserName","AccountManager","userContext","userDetails","useEffect","CheckUserHasAccount","then","py","pr","CreateNewUserUsingMetamask","ErrorFallback","createNewTweet","App","setTweets","getDefaultProvider","getAllTweets","allTweets","allTweetsWithUserNames","Promise","all","FallbackComponent","maxW","centerContent","divider","borderColor","CreateNewPostMetamask","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fbbe2e6.chunk.js","sourcesContent":["import React from \"react\";\nimport { TweetInfo } from \"../types/TweetTypes\";\n\nimport { Box, Center } from \"@chakra-ui/react\";\n\nfunction Tweet({\n  tweet: { text, user, username },\n}: {\n  tweet: TweetInfo;\n}): JSX.Element {\n  return (\n    <Center w=\"100%\">\n      <Box w=\"100%\" borderWidth=\"1px\" borderRadius=\"lg\">\n        <Box pt=\"3\" pb=\"4\" px=\"6\">\n          <Box\n            color=\"gray.500\"\n            fontWeight=\"semibold\"\n            letterSpacing=\"wide\"\n            fontSize=\"xs\"\n            textTransform=\"uppercase\"\n            ml=\"2\"\n            textAlign=\"center\"\n            mb=\"3\"\n          >\n            {username + \"  | \" + user}\n          </Box>\n\n          <Box mt=\"1\" fontWeight=\"semibold\" as=\"h4\" lineHeight=\"tight\">\n            {text}\n          </Box>\n        </Box>\n      </Box>\n    </Center>\n  );\n}\n\nexport default Tweet;\n","import { Skeleton, Stack, StackDivider, VStack } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { TweetInfo } from \"../types/TweetTypes\";\nimport Tweet from \"./Tweet\";\n\nexport interface TweetListProps {\n  tweets: TweetInfo[];\n}\n\nfunction TweetList({ tweets }: TweetListProps): JSX.Element {\n  return (\n    <>\n      {tweets.length === 0 ? (\n        <Stack spacing={3}>\n          <Skeleton height=\"70px\" />\n          <Skeleton height=\"70px\" />\n          <Skeleton height=\"70px\" />\n        </Stack>\n      ) : (\n        <VStack spacing={3} align=\"stretch\">\n          {tweets\n            .map((tweet) => (\n              <Tweet key={tweet.text + tweet.user} tweet={tweet}></Tweet>\n            ))\n            .reverse()}\n        </VStack>\n      )}\n    </>\n  );\n}\n\nexport default TweetList;\n","import { ethers, providers } from \"ethers\";\nimport UnstoppableTweetsContract from \"../../artifacts/contracts/UnstoppableTweets.sol/UnstoppableTweets.json\";\nimport { UnstoppableTweets } from \"../../typechain/UnstoppableTweets\";\n\nconst contractAddress = \"0x3b71AAdB278DF055b3EaE7150F02a7b5DC801577\";\n\nexport function CreateContract(\n  provider: ethers.providers.BaseProvider\n): UnstoppableTweets {\n  const daiContract = new ethers.Contract(\n    contractAddress,\n    UnstoppableTweetsContract.abi,\n    provider\n  ) as UnstoppableTweets;\n\n  return daiContract;\n}\n\nexport function CreateContractWithSigner(): UnstoppableTweets | null {\n  const anywindow = window as any;\n\n  if (!anywindow.ethereum) {\n    console.error(\"no metamask, you wont be able to create user or posts\");\n    return null;\n  }\n\n  const provider = new ethers.providers.Web3Provider(anywindow.ethereum);\n  const signer = provider.getSigner();\n\n  return CreateContract(provider).connect(signer);\n}\n","import React, { useContext, useState } from \"react\";\n\nexport type UserDetails = {\n  hasAccount: boolean;\n  accountName: string;\n};\n\nexport type UserContextType = {\n  value: UserDetails;\n  setUserValue: (user: UserDetails) => void;\n};\n\nconst UserDetailsInitialValue: UserDetails = {\n  hasAccount: false,\n  accountName: \"\",\n};\n\nconst UserContext = React.createContext<UserContextType>({} as any);\n\nexport function UserContextProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const [userValuesContext, setUserValuesContext] = useState(\n    UserDetailsInitialValue\n  );\n\n  const contextObj: UserContextType = {\n    value: userValuesContext,\n    setUserValue: (user) => setUserValuesContext(user),\n  };\n\n  return (\n    <UserContext.Provider value={contextObj}>{children}</UserContext.Provider>\n  );\n}\n\nexport function UseUserContext() {\n  return useContext(UserContext);\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport _ from \"lodash\";\n\nexport interface Validation {\n  readonly [id: string]: (\n    newValue: string,\n    formState: FormState\n  ) => null | string;\n}\n\nexport interface FormState {\n  readonly [id: string]: {\n    readonly error: string | null;\n    readonly value: string;\n  };\n}\n\nfunction useForm(\n  validation: Validation\n): readonly [(e: React.FormEvent<HTMLFormElement>) => void, FormState] {\n  const [formState, changeState] = useState<FormState>(\n    _.mapValues(validation, () => ({ error: null, value: \"\" }))\n  );\n\n  const validateFormFields = useCallback(\n    (currentformState: FormState) => {\n      const newFormState = Object.entries(validation).reduce<FormState>(\n        (result, [id, validationFunc]) => {\n          if (validationFunc) {\n            const { value } = currentformState[id];\n            const newValidationState = validationFunc(value, currentformState);\n            return { ...result, [id]: { error: newValidationState, value } };\n          }\n          return result;\n        },\n        {}\n      );\n      changeState({ ...currentformState, ...newFormState });\n    },\n    [validation]\n  );\n\n  const onChange = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      const inputElement = e.target as HTMLInputElement;\n\n      const { id, value } = inputElement;\n      validateFormFields({ ...formState, [id]: { ...formState[id], value } });\n    },\n    [formState, validateFormFields]\n  );\n\n  return [onChange, formState] as const;\n}\n\nexport default useForm;\n","import React from \"react\";\nimport {\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormHelperText,\n  FormLabel,\n  Input,\n  Textarea,\n} from \"@chakra-ui/react\";\n\nimport useForm, { FormState, Validation } from \"./useForm\";\n\nexport interface InputDeclation {\n  id: string;\n  label: string;\n  type?: string;\n  helperText?: string;\n  validation?: (newValue: string, formState: FormState) => string | null;\n}\n\ninterface BasicFormProps {\n  definition: ReadonlyArray<InputDeclation>;\n  submitText?: string;\n  onSubmit?: (state: FormState) => void;\n}\n\nfunction BasicForm({\n  definition,\n  submitText = \"Submit\",\n  onSubmit = () => {},\n}: BasicFormProps): JSX.Element {\n  function getFormValidation(): Validation {\n    return definition.reduce<Validation>((validationObj, input) => {\n      const validationFunc = input.validation ?? (() => null);\n      return { ...validationObj, [input.id]: validationFunc };\n    }, {});\n  }\n\n  const [onChange, formState] = useForm(getFormValidation());\n\n  const inputs = definition.map((inputElement) => (\n    <FormControl\n      key={inputElement.id}\n      id={inputElement.id}\n      isInvalid={formState[inputElement.id].error !== null}\n    >\n      <FormLabel>{inputElement.label}</FormLabel>\n      {inputElement.type === \"textArea\" ? (\n        <Textarea size=\"lg\" />\n      ) : (\n        <Input type={inputElement.type ?? \"text\"} />\n      )}\n      {inputElement.helperText && (\n        <FormHelperText>{inputElement.helperText}</FormHelperText>\n      )}\n\n      <FormErrorMessage>{formState[inputElement.id].error}</FormErrorMessage>\n    </FormControl>\n  ));\n\n  const buttonDisabled = Object.values(formState).reduce((current, field) => {\n    if (field.error !== null) return true;\n    return current;\n  }, false);\n\n  return (\n    <form\n      onChange={onChange}\n      onSubmit={(e) => {\n        e.preventDefault();\n        onSubmit(formState);\n      }}\n      style={{ width: \"100%\" }}\n    >\n      {inputs}\n      <Button mt={3} type=\"submit\" disabled={buttonDisabled}>\n        {submitText}\n      </Button>\n    </form>\n  );\n}\n\nexport default BasicForm;\n","import { Heading } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport { UseUserContext } from \"./Context/UserContext\";\nimport BasicForm from \"./Form/BasicForm\";\n\ninterface CreateTweetProps {\n  createTweet: (username: string) => void;\n}\n\nfunction CreateTweet({ createTweet }: CreateTweetProps): JSX.Element {\n  const [createdTweet, setCreatedTweet] = useState(false);\n  const userContext = UseUserContext();\n\n  if (!userContext.value.hasAccount)\n    return <Heading size=\"md\">Create a account before posting</Heading>;\n  if (createdTweet) return <Heading>Sending Tweet :)</Heading>;\n\n  return (\n    <BasicForm\n      onSubmit={(state) => {\n        createTweet(state.tweetText.value);\n        setCreatedTweet(true);\n      }}\n      submitText={\"Create Tweet\"}\n      definition={[\n        {\n          id: \"tweetText\",\n          label: \"Create Tweet\",\n          helperText: \"You should have a account to post tweets\",\n          type: \"textArea\",\n          validation: (value) => {\n            if (value.length >= 150) return \"Your tweet is too long\";\n            return null;\n          },\n        },\n      ]}\n    />\n  );\n}\n\nexport default CreateTweet;\n","import {\n  Button,\n  Center,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Spinner,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport BasicForm from \"./Form/BasicForm\";\n\ninterface CreateAccountProps {\n  createAccount: (username: string) => void;\n}\n\nfunction CreateAccount({ createAccount }: CreateAccountProps): JSX.Element {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [isCreatingAccount, setIsCreatingAccount] = useState(false);\n  return (\n    <>\n      <Button onClick={onOpen}>Create Account</Button>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create User</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            {isCreatingAccount ? (\n              <Center mt={5}>\n                <Spinner />\n              </Center>\n            ) : (\n              <BasicForm\n                onSubmit={(state) => {\n                  createAccount(state.username.value);\n                  setIsCreatingAccount(true);\n                }}\n                definition={[\n                  {\n                    id: \"username\",\n                    label: \"Username\",\n                    helperText: \"This name is diplayed on your tweets\",\n                    validation: (value) => {\n                      if (value.length < 5) return \"Your name is too short\";\n                      if (value.length >= 50) return \"Your name is too long\";\n\n                      return null;\n                    },\n                  },\n                ]}\n              />\n            )}\n          </ModalBody>\n          <ModalFooter></ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n\nexport default CreateAccount;\n","import React, { useEffect, useState } from \"react\";\nimport CreateAccount from \"./CreateAccount\";\n\nimport { CreateContractWithSigner } from \"../components/Contract/CreateContract\";\nimport { Box, Flex, Heading, Spacer } from \"@chakra-ui/react\";\nimport { UseUserContext } from \"./Context/UserContext\";\n\ntype UserDetails = {\n  hasAccount: boolean;\n  accountName: string;\n};\n\nasync function CheckUserHasAccount(): Promise<UserDetails> {\n  const tweetContract = CreateContractWithSigner();\n  if (tweetContract) {\n    const address = await tweetContract.signer.getAddress();\n\n    const hasAccount = await tweetContract.hasUserName(address);\n    const accountName = await tweetContract.userNames(address);\n\n    return { hasAccount, accountName };\n  }\n  return { hasAccount: false, accountName: \"\" };\n}\n\nasync function CreateNewUserUsingMetamask(username: string) {\n  const tweetContract = CreateContractWithSigner();\n  if (tweetContract) await tweetContract.createNewUserName(username);\n}\n\nfunction AccountManager(): JSX.Element {\n  const userContext = UseUserContext();\n  const userDetails = userContext.value;\n\n  useEffect(() => {\n    CheckUserHasAccount().then((result) => userContext.setUserValue(result));\n  }, []);\n\n  return (\n    <>\n      <Flex px=\"10\" py=\"3\">\n        <Box>\n          <Heading size=\"xl\">Unstoppable Tweets</Heading>\n        </Box>\n        <Spacer />\n        <Box pr=\"10\">\n          {userDetails.hasAccount ? (\n            <Heading size=\"md\">{userDetails.accountName}</Heading>\n          ) : (\n            <CreateAccount\n              createAccount={(username) => CreateNewUserUsingMetamask(username)}\n            ></CreateAccount>\n          )}\n        </Box>\n      </Flex>\n    </>\n  );\n}\n\nexport default AccountManager;\n","import { Heading } from \"@chakra-ui/react\";\n\nfunction ErrorFallback() {\n  return <Heading>Your transaction failed, please try again</Heading>;\n}\n\nexport default ErrorFallback;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport TweetList from \"./components/TweetList\";\nimport { Container, StackDivider, VStack } from \"@chakra-ui/react\";\nimport { TweetInfo } from \"./types/TweetTypes\";\nimport {\n  CreateContract,\n  CreateContractWithSigner,\n} from \"./components/Contract/CreateContract\";\nimport CreateTweet from \"./components/CreateTweet\";\nimport AccountManager from \"./components/AccountManager\";\nimport { UserContextProvider } from \"./components/Context/UserContext\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport ErrorFallback from \"./components/ErrorFallback\";\n\nconst netWorkAdress =\n  \"https://ropsten.infura.io/v3/98d55f8a224f4f60b8b7eadad2059c08\";\nconst HARDHAT_NETWORK_ID = \"31337\";\n\nasync function CreateNewPostMetamask(text: string) {\n  const tweetContract = CreateContractWithSigner();\n  if (tweetContract) await tweetContract.createNewTweet(text);\n}\n\nfunction App() {\n  const [tweets, setTweets] = useState<TweetInfo[]>([]);\n\n  useEffect(() => {\n    const provider = ethers.providers.getDefaultProvider(netWorkAdress);\n    const tweetContract = CreateContract(provider);\n\n    tweetContract.getAllTweets().then((allTweets) => {\n      const allTweetsWithUserNames = allTweets.map(async (tweet) => {\n        return {\n          ...tweet,\n          username: await tweetContract.userNames(tweet.user),\n        };\n      });\n\n      Promise.all(allTweetsWithUserNames).then((result) => setTweets(result));\n    });\n  }, []);\n\n  return (\n    <ErrorBoundary FallbackComponent={ErrorFallback}>\n      <UserContextProvider>\n        <AccountManager></AccountManager>\n        <Container maxW=\"container.md\" centerContent mt={5}>\n          <VStack\n            divider={<StackDivider borderColor=\"gray.200\" />}\n            spacing={7}\n            align=\"stretch\"\n            w=\"100%\"\n          >\n            <CreateTweet\n              createTweet={(tweetText) => CreateNewPostMetamask(tweetText)}\n            ></CreateTweet>\n\n            <TweetList tweets={tweets}></TweetList>\n          </VStack>\n        </Container>\n      </UserContextProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}